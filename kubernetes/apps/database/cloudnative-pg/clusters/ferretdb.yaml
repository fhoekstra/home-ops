# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/postgresql.cnpg.io/imagecatalog_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: ImageCatalog
metadata:
  name: documentdb-postgres
spec:
  images:
    - major: 17
      image: ghcr.io/ferretdb/postgres-documentdb:17-0.106.0-ferretdb-2.5.0
---
# yaml-language-server: $schema=https://github.com/datreeio/CRDs-catalog/raw/refs/heads/main/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: ferretdb-pg-cluster
  annotations:
    # required for seamless bootstrap: https://github.com/cloudnative-pg/cloudnative-pg/issues/5778#issuecomment-2783417464
    cnpg.io/skipEmptyWalArchiveCheck: "enabled"
spec:
  imageCatalogRef:
    apiGroup: postgresql.cnpg.io
    kind: ImageCatalog
    name: documentdb-postgres
    major: 17

  instances: 3

  # Needed to make postgres-documentdb run at all, thank this comment for figuring this out:
  # https://github.com/FerretDB/FerretDB/issues/4765#issuecomment-2701765707
  postgresUID: 999
  postgresGID: 999

  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 50m

  storage:
    size: 10Gi
    storageClass: local-hostpath

  postgresql:
    shared_preload_libraries:
      - pg_cron
      - pg_documentdb_core
      - pg_documentdb
    parameters:
      # Got this from pg_cron docs
      cron.database_name: ferretDB
      # Copied from https://github.com/FerretDB/documentdb/blob/ferretdb/packaging/10-preload.sh
      documentdb.enableCompact: "true"
      documentdb.enableLetAndCollationForQueryMatch: "true"
      documentdb.enableNowSystemVariable: "true"
      documentdb.enableSortbyIdPushDownToPrimaryKey: "true"
      documentdb.enableSchemaValidation: "true"
      documentdb.enableBypassDocumentValidation: "true"
      documentdb.enableUserCrud: "true"
      documentdb.maxUserLimit: "100"
    pg_hba:
      # Fix for pg_cron, seems like it always runs from postgres user
      - host ferretDB postgres localhost trust
      # Fix FerretDB fe_sendauth error
      - host ferretDB ferret localhost trust

  bootstrap:
    recovery:
      source: &source pg
    # initdb:
    #   database: ferretDB
    #   owner: ferret
    #   postInitApplicationSQL:
    #     - create extension if not exists pg_cron;
    #     - create extension if not exists documentdb cascade;
    #     # Instead of doing a bunch of grants on different schemas you can just grant an included role
    #     - grant documentdb_admin_role to ferret;

  plugins:
    - name: barman-cloud.cloudnative-pg.io
      isWALArchiver: true
      parameters:
        barmanObjectName: ferretdb-backupstore
        serverName: *source

  externalClusters:
    - name: *source
      plugin:
        name: barman-cloud.cloudnative-pg.io
        parameters:
          barmanObjectName: cluster-17-backup-local
          serverName: *source
---
# yaml-language-server: $schema=https://github.com/datreeio/CRDs-catalog/raw/refs/heads/main/barmancloud.cnpg.io/objectstore_v1.json
apiVersion: barmancloud.cnpg.io/v1
kind: ObjectStore
metadata:
  name: ferretdb-backupstore
spec:
  retentionPolicy: 14d
  instanceSidecarConfiguration:
    resources:
      limits:
        memory: 512Mi
        cpu: 1
      requests:
        memory: 128Mi
        cpu: 10m
  configuration:
    destinationPath: s3://cnpg/ferretdb/
    endpointURL: http://versity.storage.svc.cluster.local:7070
    s3Credentials:
      accessKeyId:
        name: s3-creds
        key: ACCESS_KEY_ID
      secretAccessKey:
        name: s3-creds
        key: SECRET_KEY
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/refs/heads/main/postgresql.cnpg.io/scheduledbackup_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: ferretdb
spec:
  backupOwnerReference: self
  cluster:
    name: ferretdb-pg-cluster
  schedule: "0 0 1 * * *"
  immediate: true
  method: plugin
  pluginConfiguration:
    name: barman-cloud.cloudnative-pg.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ferretdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ferretdb
  template:
    metadata:
      labels:
        app: ferretdb
    spec:
      containers:
        - name: ferretdb
          image: ghcr.io/ferretdb/ferretdb:2.5.0
          ports:
            - containerPort: 27017
          env:
            - name: FERRETDB_POSTGRESQL_URL
              valueFrom:
                secretKeyRef:
                  name: ferretdb-pg-cluster-app
                  key: uri
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 15m

---
apiVersion: v1
kind: Service
metadata:
  name: ferretdb-service
spec:
  selector:
    app: ferretdb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: NodePort
