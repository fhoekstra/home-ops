---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: rook-ceph-cluster
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: v1.17.6
  url: oci://ghcr.io/rook/rook-ceph-cluster
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
spec:
  interval: 1h
  timeout: 15m
  chartRef:
    kind: OCIRepository
    name: rook-ceph-cluster
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    monitoring:
      enabled: true
      createPrometheusRules: true
    toolbox:
      enabled: true
    ingress:
      # -- Enable an ingress for the ceph-dashboard
      dashboard:
        # labels:
        #   external-dns/private: "true"
        annotations:
          external-dns.alpha.kubernetes.io/target: "internal.${CLUSTER_DOMAIN}"
        host:
          name: &host "rook.${CLUSTER_DOMAIN}"
          path: "/"
        #   pathType: Prefix
        tls:
          - hosts:
              - *host
        ## Note: Only one of ingress class annotation or the `ingressClassName:` can be used at a time
        ## to set the ingress class
        ingressClassName: internal

    cephClusterSpec:
      cephConfig:
        global:
          bdev_enable_discard: "true" # quote
          bdev_async_discard_threads: "1" # quote
          osd_class_update_on_start: "false" # quote
          device_failure_prediction_mode: local # requires mgr module
      cleanupPolicy:
        wipeDevicesFromOtherClusters: true
      crashCollector:
        disable: false
      csi:
        readAffinity:
          enabled: true
      dashboard:
        enabled: true
        urlPrefix: /
        ssl: false
        # prometheusEndpoint: http://prometheus-operated.monitoring.svc.cluster.local:9090
      mgr:
        modules:
          - name: diskprediction_local
            enabled: true
          - name: insights
            enabled: true
          - name: pg_autoscaler
            enabled: true
          - name: rook
            enabled: true
      network:
        provider: host
        connections:
          requireMsgr2: true
      storage:
        useAllNodes: true
        useAllDevices: false
        devicePathFilter: "/dev/disk/by-id/(ata-SAMSUNG_MZ7KM|ata-SAMSUNG_SSD_PM871b)*" # (ata-SAMSUNG_MZ7KM1T9HAJM-00005_S2HNNX0HA00353|ata-SAMSUNG_SSD_PM871b_2.5_7mm_256GB_S3U4NX0K852590|ata-SAMSUNG_MZ7KM480HMHQ-00005_S3F4NX0JA06408)" # List these with: talosctl list /dev/disk/by-id
        config:
          osdsPerDevice: "1"
      resources:
        mgr:
          limits:
            cpu: 500m
            memory: 700Mi
          requests:
            cpu: 50m
            memory: 320Mi
        mon:
          limits:
            cpu: 500m
            memory: 640Mi
          requests:
            cpu: 100m
            memory: 320Mi
        osd:
          limits:
            cpu: 500m
            memory: 1600Mi
          requests:
            cpu: 150m
            memory: 800Mi
        prepareosd:
          limits:
            cpu: 1000m
            memory: 400Mi
          requests:
            cpu: 50m
            memory: 200Mi
        mgr-sidecar:
          limits:
            cpu: 256m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 40Mi
        crashcollector:
          limits:
            cpu: 100m
            memory: 64M
          requests:
            cpu: 15m
            memory: 32M
        logcollector:
          limits:
            cpu: 50m
            memory: 32Mi
          requests:
            cpu: 5m
            memory: 16Mi
        cleanup:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 100Mi
    cephBlockPools:
      - name: ceph-blockpool
        spec:
          failureDomain: host
          replicated:
            size: 2
        storageClass:
          enabled: true
          name: ceph-block
          isDefault: true
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: Immediate
          mountOptions: ["discard"]
          parameters:
            compression_mode: aggressive
            compression_algorithm: zstd
            imageFormat: "2"
            imageFeatures: layering,fast-diff,object-map,deep-flatten,exclusive-lock
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
            csi.storage.k8s.io/node-stage-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/fstype: ext4
    cephBlockPoolsVolumeSnapshotClass:
      enabled: true
      name: csi-ceph-blockpool
      isDefault: false
      deletionPolicy: Delete
      allowVolumeExpansion: true
      volumeBindingMode: Immediate
      mountOptions: ["discard"]
    cephFileSystems: []
    cephObjectStores: []
