{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    'docker:enableMajor',
    ':automergeBranch',
    ':dependencyDashboard',
    ':disableRateLimiting',
    ':semanticCommits',
    ':separatePatchReleases',
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  suppressNotifications: [
    'prEditedNotification',
    'prIgnoreNotification',
  ],
  schedule: [
    'every weekend',
    '* * * * 3',
  ],
  ignorePaths: [
    '**/*.sops.*',
  ],
  flux: {
    managerFilePatterns: [
      '/(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$/',
    ],
  },
  'helm-values': {
    managerFilePatterns: [
      '/(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$/',
    ],
  },
  helmfile: {
    managerFilePatterns: [
      '/(^|/)helmfile\\.ya?ml(?:\\.j2)?$/',
    ],
  },
  kubernetes: {
    managerFilePatterns: [
      '/(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$/',
    ],
  },
  kustomize: {
    managerFilePatterns: [
      '/(^|/)kustomization\\.ya?ml(?:\\.j2)?$/',
    ],
  },
  pip_requirements: {
    managerFilePatterns: [
      '/(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)(?:\\.j2)?$/',
    ],
  },
  packageRules: [
    {
      description: [
        'Auto-merge GitHub Actions for minor and patch',
      ],
      matchManagers: [
        'github-actions',
      ],
      automerge: true,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'minor',
        'patch',
      ],
    },
    {
      description: [
        'Flux Operator Group',
      ],
      groupName: 'Flux Operator',
      matchDatasources: [
        'docker',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/flux-operator/',
        '/flux-instance/',
      ],
    },
    {
      description: 'Talos',
      groupName: 'Talos',
      matchPackageNames: [
        '**siderolabs/installer',
        '**siderolabs/talos',
      ],
      overrideDepName: "{{{ replace 'installer' 'talos' depName }}}",
      versioning: 'semver',
      automerge: false,
    },
    {
      description: 'Rook-Ceph Group',
      groupName: 'Rook-Ceph',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/rook-ceph/',
        '/rook-ceph-cluster/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(container)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: ' ( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'container',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'container',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'digest',
      ],
      semanticCommitType: 'chore',
      semanticCommitScope: 'container',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentDigestShort}} â†’ {{newDigestShort}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(helm)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'helm',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'helm',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-release)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-release',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-release',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-action)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-action',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-action',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      labels: [
        'type/major',
      ],
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      labels: [
        'type/minor',
      ],
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      labels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      addLabels: [
        'renovate/container',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      addLabels: [
        'renovate/helm',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      addLabels: [
        'renovate/github-release',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      addLabels: [
        'renovate/github-action',
      ],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: [
        'Process YAML custom dependencies',
      ],
      managerFilePatterns: [
        '/(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$/',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+(:\\s|=)(&\\S+\\s)?(?<currentValue>\\S+)',
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
    },
    {
      customType: 'regex',
      description: 'Process CloudnativePG Postgresql version',
      managerFilePatterns: [
        '/(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$/',
      ],
      matchStrings: [
        'image(Name)?: (?<depName>\\S+):(?<currentValue>.*\\-.*)',
      ],
      datasourceTemplate: 'docker',
      versioningTemplate: 'redhat',
    },
  ],
}
